---
import JssLayout from "../layouts/JssLayout.astro";
import { SitemapService, StaticPath } from "../lib/sitemap-service";
import { SitecorePagePropsFactory } from "../lib/page-props-factory";
import { SitecoreContextMap } from "@astro-sitecore-jss/astro-sitecore-jss";
import type {
  LayoutServiceContext,
  RouteData,
} from "@sitecore-jss/sitecore-jss/layout";
import config from "../temp/config";
import GraphQLRequestClientFactory from "../lib/graphql/graphql-request-client-factory";
import { sitePrefixIdentifier } from "@/lib/constants";
import { languages } from "../lib/languages";

export const prerender = false;
/*


export async function getStaticPaths() {
  try {
    const graphQlRequestSitemapFactory = new GraphQLRequestClientFactory();
    const sitemapService = new SitemapService(graphQlRequestSitemapFactory);
    let staticPaths: StaticPath[] = [];
    if (config.sites) {
      const sites = JSON.parse(config.sites);
      for (const site of sites) {
        const sitePrefix = `${sitePrefixIdentifier}${site.name}`;

        for (const language of languages) {
          const paths = await sitemapService
            .getStaticSitemap(language, site.name)
            .then((value) => {
              return value.map((x) => {
                x.params.path = `/${sitePrefix}/${language}/${x.params.path ?? ""}`.toLowerCase();
                return x;
              });
            });
          staticPaths.push(...paths);
        }
      }
    } else {
      const paths = await sitemapService.getStaticSitemap(
        config.defaultLanguage
      );
      staticPaths.push(...paths);
    }

    return staticPaths;
  } catch (error) {
    console.error(error);
  }

  return [];
}
*/

export type SitecoreContextValue = LayoutServiceContext & {
  itemId?: string;
  route?: RouteData;
};

let pageProps = {
  layoutData: {},
};

try {
  console.log("Config", config);
  console.log(config.sitecoreEdgeContextId);
  console.log(config.sitecoreEdgeUrl);

  const { path } = Astro.params;
  let site = config.sitecoreSiteName;
  let language = config.defaultLanguage;
  let cleanPath = path ?? "/";
  console.log("Path", path);
  if (path) {
    const parts = path.split("/");
    if (parts[0].indexOf(sitePrefixIdentifier) === 0) {
      site = parts[0].replace(sitePrefixIdentifier, "");
      cleanPath = path.replace(`${parts[0]}/`, "");
    }

    if (parts[1]) {
      language = parts[1];
      cleanPath = cleanPath.replace(`${parts[1]}`, "") ?? "/";
    }
  }

  console.log("Site", site);
  console.log("CleanPath", cleanPath);
  console.log("Language", language);

  Astro.locals.site = site;

  let sitecorePagePropsFactory = new SitecorePagePropsFactory(
    Astro.locals.site || config.sitecoreSiteName
  );
  pageProps = await sitecorePagePropsFactory.create(cleanPath, language);
  console.log("PageProps", pageProps);

  let scContext = pageProps.layoutData.sitecore.context as SitecoreContextValue;
  scContext.route = pageProps.layoutData.sitecore.route;
  scContext.itemId = pageProps.layoutData.sitecore.route.itemId;

  SitecoreContextMap.setKey("scContext", scContext);
  SitecoreContextMap.setKey("dictionary", pageProps.dictionary);
} catch (error) {
  console.error(error);
}
---

<JssLayout title="a" layoutData={pageProps.layoutData} />
