---
import JssLayout from "../layouts/JssLayout.astro";
import { SitemapService, StaticPath } from "../lib/sitemap-service";
import { SitecorePagePropsFactory } from "../lib/page-props-factory";
import { SitecoreContextMap } from "@astro-sitecore-jss/astro-sitecore-jss";
import type {
  LayoutServiceContext,
  RouteData,
} from "@sitecore-jss/sitecore-jss/layout";
import config from "../temp/config";
import GraphQLRequestClientFactory from "../lib/graphql/graphql-request-client-factory";
import { sitePrefixIdentifier } from "@/lib/constants";

export const prerender = false;

export type SitecoreContextValue = LayoutServiceContext & {
  itemId?: string;
  route?: RouteData;
};

let pageProps = {
  layoutData: {},
};

try {
  const { path } = Astro.params;
  let site = config.sitecoreSiteName;
  let language = config.defaultLanguage;
  let cleanPath = path ?? "/";
  console.log(cleanPath);
  if (path) {
    const parts = path.split("/");
    if (parts[0].indexOf(sitePrefixIdentifier) === 0) {
      site = parts[0].replace(sitePrefixIdentifier, "");
      cleanPath = path.replace(`${parts[0]}/`, "");
    }
    if (parts[1]) {
      language = parts[1];
      cleanPath = cleanPath.replace(`${parts[1]}`, "") ?? "/";
    }
  }

  Astro.locals.site = site;

  let sitecorePagePropsFactory = new SitecorePagePropsFactory(
    Astro.locals.site || config.sitecoreSiteName
  );
  pageProps = await sitecorePagePropsFactory.create(
    cleanPath,
    config.defaultLanguage
  );

  let scContext = pageProps.layoutData.sitecore.context as SitecoreContextValue;
  scContext.route = pageProps.layoutData.sitecore.route;
  scContext.itemId = pageProps.layoutData.sitecore.route.itemId;

  SitecoreContextMap.setKey("scContext", scContext);
  SitecoreContextMap.setKey("dictionary", pageProps.dictionary);
} catch (error) {
  console.error(error);
}
---

<JssLayout title="a" layoutData={pageProps.layoutData} />
